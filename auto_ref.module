<?php


/*
 * Tell Drupal about the field widget
*/
function auto_ref_field_widget_info() {
    return array(
        'auto_ref_field_widget' => array(
          'label' => t('Auto Reference'),
          'field types' => array('entityreference'),
            'behaviors' => array(
              'multiple values' => FIELD_BEHAVIOR_DEFAULT,
            )
        ),
    );    
}


/*
 * Tell Drupal how to display your widget
*/
function auto_ref_field_widget_form(&$form,&$form_state,$field,$instance,$langcode,$items,$delta,$element) {
   
   // Ensure that the entity target type exists before displaying the widget.
   $entity_info = entity_get_info($field['settings']['target_type']);

   if (empty($entity_info)){
    return;
   }

   $entity_type = $instance['entity_type'];
   $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
   $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
   
   if ($instance['widget']['type'] == 'auto_ref_field_widget'){
       $entity_ids = array();
       $entity_labels = array();
        // Build an array of entities ID.
       foreach ($items as $item) {
        $entity_ids[] = $item['target_id'];
       }
       
       // Load those entities and loop through them to extract their labels.
       $entities = entity_load($field['settings']['target_type'], $entity_ids);

       foreach ($entities as $entity_id => $entity_item) {
        $label = $handler->getLabel($entity_item);
        $key = "$label ($entity_id)";
        // Labels containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
            $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $entity_labels[] = $key;
       }

       $element += array(
        '#type' => 'hidden',
        #'#autocomplete_path' => $autocomplete_path,
        '#size' => $instance['widget']['settings']['size'],
        #'#element_validate' => array('_entityreference_auto_ref_validate'),
       );
       $entity_key = array_keys(get_object_vars($entity));
       for ($i=0; $i < count($entity_key) ; $i++) { 
       	 if(strpos($entity_key[$i], 'field_autoref') > 0){
           krumo($entity_key[$i]);
       	 }
       }
       #krumo($entity_key);
       return array('target_id' => $element); 

   }
}

function auto_ref_entity_presave($entity, $type){
	   $date = $entity->field_cot_date[LANGUAGE_NONE][0]['value'];
      $date = strtotime("$date");
      $date = date('Y-m-d', strtotime('-2 year', $date));
      $ref = $entity->field_cot_ref[LANGUAGE_NONE][0]['target_id'];
      
      $query = db_select('field_data_field_cot_ref', 'cot_ref');
      $query->join('field_data_field_cot_date', 'date_ref', "cot_ref.entity_id = date_ref.entity_id");
      $query->fields('cot_ref', array('entity_id'))
            ->condition("cot_ref.field_cot_ref_target_id", $ref, '=')
            ->condition("date_ref.field_cot_date_value", "$date", '<=')
            ->orderBy('date_ref.field_cot_date_value', 'DESC')
            ->range(0,1);
      
      $result = $query->execute();
      foreach ($result as $record) {
          $entity->field_2_ans[LANGUAGE_NONE][0]['target_id'] = $record->entity_id;
      } 	 

}
