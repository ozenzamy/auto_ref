<?php
$path = drupal_get_path('module', 'auto_ref');
#drupal_add_js($path . '/js/formeORpanne.js', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
require_once($path . '/classes/auto_ref.class.php');

/*
 * Tell Drupal about the field widget
*/
function auto_ref_field_widget_info() {
    return array(
        'auto_ref_field_widget' => array(
          'label' => t('Auto Reference'),
          'field types' => array('entityreference'),
          'behaviors' => array(
              'multiple values' => FIELD_BEHAVIOR_DEFAULT,
          ),
          'settings' => array(
               'referenceField' => NULL,
          )
        ),
    );    
}


/*
* Tell drupal to make settings to our widget
*/
function auto_ref_field_widget_settings_form($field, $instance){
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if($widget['type'] == 'auto_ref_field_widget'){
    $form['referenceField'] = array(
      '#type' => 'select',
      '#title' => t('Reference Field'),
      '#options' => AutoRef::getAllpropriete(),
      '#default_value' => $settings['referenceField'],
      '#required' => TRUE
    );
  }

  return $form;
}


/*
 * Tell Drupal how to display your widget
*/
function auto_ref_field_widget_form(&$form,&$form_state,$field,$instance,$langcode,$items,$delta,$element) {
   
   // Ensure that the entity target type exists before displaying the widget.
   $entity_info = entity_get_info($field['settings']['target_type']);

   if (empty($entity_info)){
    return;
   }

   $entity_type = $instance['entity_type'];
   $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
   $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
   
   if ($instance['widget']['type'] == 'auto_ref_field_widget'){
       $entity_ids = array();
       $entity_labels = array();
        // Build an array of entities ID.
       foreach ($items as $item) {
        $entity_ids[] = $item['target_id'];
       }
       
       // Load those entities and loop through them to extract their labels.
       $entities = entity_load($field['settings']['target_type'], $entity_ids);

       foreach ($entities as $entity_id => $entity_item) {
        $label = $handler->getLabel($entity_item);
        $key = "$label ($entity_id)";
        // Labels containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
            $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $entity_labels[] = $key;
       }

       $element += array(
        '#type' => 'hidden',
        #'#autocomplete_path' => $autocomplete_path,
        '#size' => $instance['widget']['settings']['size'],
        #'#element_validate' => array('_entityreference_auto_ref_validate'),
       );
       #krumo(field_info_instances($entity_type));
       #krumo(entity_get_all_property_info());
       #krumo(field_info_bundles($entity_type));
       return array('target_id' => $element); 

   }
}

function auto_ref_entity_presave($entity, $type){

	 AutoRef::autoRef_loader($entity);
}
